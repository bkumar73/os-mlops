{{- $userCount := .Values.user_count -}}
{{- range $i := until (int $userCount) }}
---
kind: Namespace
apiVersion: v1
metadata:
  name: {{ printf "user-%d" $i }}
  labels:
    modelmesh-enabled: 'true'
    opendatahub.io/dashboard: 'true'
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
---
kind: Secret
apiVersion: v1
metadata:
  name: aws-connection-models
  namespace: {{ printf "user-%d" $i }}
  labels:
    opendatahub.io/dashboard: 'true'
    opendatahub.io/managed: 'true'
  annotations:
    opendatahub.io/connection-type: s3
    openshift.io/display-name: object-detection
stringData:
  AWS_ACCESS_KEY_ID: minio
  AWS_DEFAULT_REGION: us-east-1
  AWS_S3_BUCKET: object-detection
  AWS_S3_ENDPOINT: http://minio-service:9000
  AWS_SECRET_ACCESS_KEY: minio123
type: Opaque
---
kind: Secret
apiVersion: v1
metadata:
  name: minio-secret
  namespace: {{ printf "user-%d" $i }}
stringData:
  accesskey: minio
  secretkey: minio123
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: minio
  namespace: {{ printf "user-%d" $i }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: minio
    spec:
      containers:
        - resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 20m
              memory: 100Mi
          readinessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          name: minio
          livenessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: secretkey
          ports:
            - containerPort: 9000
              protocol: TCP
            - containerPort: 9090
              protocol: TCP
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: File
          image: quay.io/mmurakam/minio:minio-v0.4.1
          args:
            - server
            - /data1
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: Recreate
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
kind: Service
apiVersion: v1
metadata:
  name: minio-service
  namespace: {{ printf "user-%d" $i }}
spec:
  ipFamilies:
    - IPv4
  ports:    
    - name: http
      protocol: TCP
      port: 9000
      targetPort: 9000
  internalTrafficPolicy: Cluster
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  sessionAffinity: None
  selector:
    app: minio
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: minio
  namespace: {{ printf "user-%d" $i }}
spec:
  to:
    kind: Service
    name: minio-service
    weight: 100
  port:
    targetPort: http
  wildcardPolicy: None
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dashboard-permissions
  namespace: {{ printf "user-%d" $i }}
subjects:
  - kind: User
    apiGroup: rbac.authorization.k8s.io
    name: user-0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
{{- end }}