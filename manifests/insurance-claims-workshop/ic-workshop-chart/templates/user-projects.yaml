{{- $userCount := .Values.user_count -}}
{{- range $i := until (int $userCount) }}
---
kind: Namespace
apiVersion: v1
metadata:
  name: {{ printf "user%d" $i }}
  labels:
    modelmesh-enabled: 'false'
    opendatahub.io/dashboard: 'true'
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
---
kind: Secret
apiVersion: v1
metadata:
  name: aws-connection-claims-images
  namespace: {{ printf "user%d" $i }}
  labels:
    opendatahub.io/dashboard: 'true'
    opendatahub.io/managed: 'true'
  annotations:
    opendatahub.io/connection-type: s3
    openshift.io/display-name: claims-images
stringData:
  AWS_ACCESS_KEY_ID: minio
  AWS_DEFAULT_REGION: us-east-1
  AWS_S3_BUCKET: claim-images
  AWS_S3_ENDPOINT: http://minio-service:9000
  AWS_SECRET_ACCESS_KEY: minio123
type: Opaque
---
kind: Secret
apiVersion: v1
metadata:
  name: aws-connection-models
  namespace: {{ printf "user%d" $i }}
  labels:
    opendatahub.io/dashboard: 'true'
    opendatahub.io/managed: 'true'
  annotations:
    opendatahub.io/connection-type: s3
    openshift.io/display-name: models
stringData:
  AWS_ACCESS_KEY_ID: minio
  AWS_DEFAULT_REGION: us-east-1
  AWS_S3_BUCKET: object-detection
  AWS_S3_ENDPOINT: http://minio-service:9000
  AWS_SECRET_ACCESS_KEY: minio123
type: Opaque
---
kind: Secret
apiVersion: v1
metadata:
  name: aws-connection-pipelines
  namespace: {{ printf "user%d" $i }}
stringData:
  AWS_ACCESS_KEY_ID: minio
  AWS_DEFAULT_REGION: us-east-1
  AWS_S3_BUCKET: insurance-claims-pipelines
  AWS_S3_ENDPOINT: http://minio-service:9000
  AWS_SECRET_ACCESS_KEY: minio123
type: Opaque
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: training-pvc
  namespace: {{ printf "user%d" $i }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  volumeMode: Filesystem
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  annotations:
    openshift.io/description: ''
    openshift.io/display-name: development
  name: development
  namespace: {{ printf "user%d" $i }}
  finalizers:
    - kubernetes.io/pvc-protection
  labels:
    opendatahub.io/dashboard: 'true'
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  volumeMode: Filesystem
---
apiVersion: datasciencepipelinesapplications.opendatahub.io/v1alpha1
kind: DataSciencePipelinesApplication
metadata:
  finalizers:
    - datasciencepipelinesapplications.opendatahub.io/finalizer
  name: pipelines-definition
  namespace: {{ printf "user%d" $i }}
spec:
  apiServer:
    stripEOF: true
    dbConfigConMaxLifetimeSec: 120
    applyTektonCustomResource: true
    deploy: true
    enableSamplePipeline: false
    autoUpdatePipelineDefaultVersion: true
    archiveLogs: false
    terminateStatus: Cancelled
    enableOauth: true
    trackArtifacts: true
    collectMetrics: true
    injectDefaultScript: true
  database:
    mariaDB:
      deploy: true
      pipelineDBName: mlpipeline
      pvcSize: 10Gi
      username: mlpipeline
  objectStorage:
    externalStorage:
      bucket: insurance-claims-pipelines
      host: minio-service.{{ printf "user%d" $i }}.svc:9000
      port: ''
      s3CredentialsSecret:
        accessKey: AWS_ACCESS_KEY_ID
        secretKey: AWS_SECRET_ACCESS_KEY
        secretName: aws-connection-pipelines
      scheme: http
      secure: false
  persistenceAgent:
    deploy: true
    numWorkers: 2
  scheduledWorkflow:
    cronScheduleTimezone: UTC
    deploy: true
---
kind: Secret
apiVersion: v1
metadata:
  name: minio-secret
  namespace: {{ printf "user%d" $i }}
stringData:
  accesskey: minio
  secretkey: minio123
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: minio
  namespace: {{ printf "user%d" $i }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: minio
    spec:
      containers:
        - resources:
            limits:
              cpu: 250m
              memory: 1Gi
            requests:
              cpu: 20m
              memory: 100Mi
          readinessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          name: minio
          livenessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: secretkey
          ports:
            - containerPort: 9000
              protocol: TCP
            - containerPort: 9090
              protocol: TCP
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: File
          image: quay.io/mmurakam/minio:minio-v1.2.2
          args:
            - server
            - /data1
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: Recreate
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
kind: Service
apiVersion: v1
metadata:
  name: minio-service
  namespace: {{ printf "user%d" $i }}
spec:
  ipFamilies:
    - IPv4
  ports:    
    - name: http
      protocol: TCP
      port: 9000
      targetPort: 9000
  internalTrafficPolicy: Cluster
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  sessionAffinity: None
  selector:
    app: minio
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: minio
  namespace: {{ printf "user%d" $i }}
spec:
  to:
    kind: Service
    name: minio-service
    weight: 100
  port:
    targetPort: http
  wildcardPolicy: None
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dashboard-permissions
  namespace: {{ printf "user%d" $i }}
subjects:
  - kind: User
    apiGroup: rbac.authorization.k8s.io
    name: {{ printf "user%d" $i }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init-job
  namespace: {{ printf "user%d" $i }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  template:
    spec:
      initContainers:
      - name: wait-for-db
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z -v -w30 $POSTGRESQL_DATABASE 5432; do echo "Waiting for database connection..."; sleep 2; done;']
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRESQL_DATABASE
          value: claimdb.$(NAMESPACE).svc.cluster.local
      containers:
      - name: postgresql
        image: registry.redhat.io/rhel9/postgresql-13:latest
        env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: claimdb
                key: database-name
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: claimdb
                key: database-user
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: claimdb
                key: database-password
          - name: POSTGRESQL_DATABASE_HOST
            value: claimdb.$(NAMESPACE).svc.cluster.local
        command: ["/bin/bash", "-c"]
        args:
        - |
          echo "Running SQL script"
          psql -h $POSTGRESQL_DATABASE_HOST -p 5432 -U $POSTGRESQL_USER -d $POSTGRESQL_DATABASE -f /sql-script/script.sql
        volumeMounts:
        - name: sql-script-volume
          mountPath: /sql-script
      restartPolicy: Never
      volumes:
      - name: sql-script-volume
        configMap:
          name: sql-script-configmap
  backoffLimit: 4
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ic-app
  namespace: {{ printf "user%d" $i }}
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ic-app
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: ic-app
        deployment: ic-app
    spec:
      containers:
        - name: insurance-claim-processing-git
          image: quay.io/rh-aiservices-bu/rhoai-lab-insurance-claim-app:1.3
          ports:
            - containerPort: 5000
              protocol: TCP
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: INFERENCE_SERVER_URL
              value: {{ .Values.llm_inference_url }}
            - name: MAX_NEW_TOKENS
              value: '1024'
            - name: TOP_K
              value: '10'
            - name: TOP_P
              value: '0.95'
            - name: TYPICAL_P
              value: '0.95'
            - name: TEMPERATURE
              value: '0.01'
            - name: REPETITION_PENALTY
              value: '1.03'
            - name: POSTGRES_HOST
              value: claimdb
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: claimdb
                  key: database-name
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: claimdb
                  key: database-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: claimdb
                  key: database-password
            - name: POSTGRES_PORT
              value: '5432'
            - name: S3_ENDPOINT_URL
              value: http://minio-service:9000
            - name: IMAGES_BUCKET
              value: claim-images
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: accesskey
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: secretkey
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: claimdb
  namespace: {{ printf "user%d" $i }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  selector:
    matchLabels:
      app: claimdb
  replicas: 1
  template:
    metadata:
      labels:
        app: claimdb
    spec:
      containers:
        - name: postgresql
          image: registry.redhat.io/rhel9/postgresql-13:latest
          resources:
            limits:
              memory: 512Mi
          readinessProbe:
            exec:
              command:
                - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            exec:
              command:
                - /usr/libexec/check-container
                - '--live'
            initialDelaySeconds: 120
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: claimdb
                  key: database-user
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: claimdb
                  key: database-password
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: claimdb
                  key: database-name
          securityContext:
            capabilities: {}
            privileged: false
          ports:
            - containerPort: 5432
              protocol: TCP
          imagePullPolicy: IfNotPresent
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: claimdb-data
              mountPath: /var/lib/pgsql/data
      volumes:
        - name: claimdb-data
          persistentVolumeClaim:
            claimName: claimdb
  strategy:
    type: Recreate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: claimdb
  namespace: {{ printf "user%d" $i }}
  labels:
    app: claimdb
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: ic-app
  namespace: {{ printf "user%d" $i }}
  labels:
    app: ic-app
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  to:
    kind: Service
    name: ic-app
    weight: 100
  port:
    targetPort: http
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
---
kind: Secret
apiVersion: v1
metadata:
  name: claimdb
  namespace: {{ printf "user%d" $i }}
  labels:
    app: claimdb
  annotations:
    argocd.argoproj.io/sync-wave: "0"
stringData:
  database-name: claimdb
  database-password: claimdb
  database-user: claimdb
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: ic-app
  namespace: {{ printf "user%d" $i }}
  labels:
    app: ic-app
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  ports:
  - name: http
    protocol: TCP
    port: 5000
    targetPort: 5000
  selector:
    app: ic-app
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: claimdb
  namespace: {{ printf "user%d" $i }}
  labels:
    app: claimdb
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  ports:
  - name: postgresql
    protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    app: claimdb
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sql-script-configmap
  namespace: {{ printf "user%d" $i }}
  annotations:
    argocd.argoproj.io/sync-wave: "0"
data:
  script.sql: |  
    CREATE SCHEMA IF NOT EXISTS claims
    AUTHORIZATION claimdb;

    DROP TABLE IF EXISTS claims.claims CASCADE;
    DROP TABLE IF EXISTS claims.original_images CASCADE;
    DROP TABLE IF EXISTS claims.processed_images CASCADE;
    DROP SEQUENCE IF EXISTS claims.claims_id_seq CASCADE;
    DROP SEQUENCE IF EXISTS claims.original_images_id_seq CASCADE;
    DROP SEQUENCE IF EXISTS claims.processed_images_id_seq CASCADE;

    -- SEQUENCE: claims.claims_id_seq

    CREATE SEQUENCE IF NOT EXISTS claims.claims_id_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 2147483647
    CACHE 1;

    -- Table: claims.claims

    CREATE TABLE IF NOT EXISTS claims.claims
    (
        id integer NOT NULL DEFAULT nextval('claims.claims_id_seq'::regclass),
        subject text COLLATE pg_catalog."default",
        body text COLLATE pg_catalog."default",
        summary text COLLATE pg_catalog."default",
        location text COLLATE pg_catalog."default",
        "time" text COLLATE pg_catalog."default",
        sentiment text COLLATE pg_catalog."default",
        CONSTRAINT claims_pkey PRIMARY KEY (id)
    )
    WITH (
        OIDS = FALSE
    )
    TABLESPACE pg_default;

    -- Link Table to Sequence    

    ALTER SEQUENCE claims.claims_id_seq 
        OWNED BY claims.claims.id;

    -- SEQUENCE: claims.original_images_id_seq

    CREATE SEQUENCE IF NOT EXISTS claims.original_images_id_seq
        INCREMENT 1
        START 1
        MINVALUE 1
        MAXVALUE 2147483647
        CACHE 1;

    -- Table: claims.original_images

    CREATE TABLE IF NOT EXISTS claims.original_images
    (
        id integer NOT NULL DEFAULT nextval('claims.original_images_id_seq'::regclass),
        image_name text COLLATE pg_catalog."default" NOT NULL,
        image_key text COLLATE pg_catalog."default" NOT NULL,
        claim_id integer NOT NULL,
        CONSTRAINT original_images_pkey PRIMARY KEY (id),
        CONSTRAINT fk_claim_id FOREIGN KEY (claim_id)
            REFERENCES claims.claims (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
    )
    WITH (
        OIDS = FALSE
    )
    TABLESPACE pg_default;

    -- Link Table to Sequence    

    ALTER SEQUENCE claims.original_images_id_seq 
        OWNED BY claims.original_images.id;

    -- SEQUENCE: claims.processed_images_id_seq

    CREATE SEQUENCE IF NOT EXISTS claims.processed_images_id_seq
        INCREMENT 1
        START 1
        MINVALUE 1
        MAXVALUE 2147483647
        CACHE 1;

    -- Table: claims.processed_images

    CREATE TABLE IF NOT EXISTS claims.processed_images
    (
        id integer NOT NULL DEFAULT nextval('claims.processed_images_id_seq'::regclass),
        image_name text COLLATE pg_catalog."default" NOT NULL,
        image_key text COLLATE pg_catalog."default" NOT NULL,
        claim_id integer NOT NULL,
        CONSTRAINT processed_images_pkey PRIMARY KEY (id),
        CONSTRAINT fk_claim_id FOREIGN KEY (claim_id)
            REFERENCES claims.claims (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
    )
    WITH (
        OIDS = FALSE
    )
    TABLESPACE pg_default;

    -- Link Table to Sequence    

    ALTER SEQUENCE claims.processed_images_id_seq 
        OWNED BY claims.processed_images.id;

    -----
    -- INSERTS
    -----
    -- CLAIM1

    INSERT INTO claims.claims (subject, body, summary, location, time, sentiment) VALUES ('Claim for Recent Car Accident - Policy Number: AC-987654321', '
    Dear Pacific Shield Insurance,
    
    I hope this email finds you well. My name is Sarah Turner, and I am writing to file a claim for a recent car accident that occurred on January 2nd, 2024, at approximately 3:30 PM. My policy number is AC-987654321.

    The accident took place at the intersection of Birch Street and Willow Avenue in the city of Evergreen. I was driving my vehicle, a black Toyota Camry with license plate number DEF-456, heading south on Birch Street. At the intersection, the traffic signal was green, and I proceeded through the intersection.

    At the same time, another vehicle, a blue Chevrolet Traverse with license plate number GHI-789, was traveling west on Willow Avenue. Unfortunately, the driver failed to stop at the red traffic signal, resulting in a collision with the front passenger side of my vehicle.

    The impact caused significant damage to both vehicles. The front bumper and right headlight of my Toyota Camry are extensively damaged, and there are also damages to the front driver''s side of the Chevrolet Traverse. Fortunately, no injuries were sustained during the accident, and both drivers were able to move their vehicles to the side of the road.

    I promptly exchanged information with the other driver, Mr. Daniel Reynolds, including our names, phone numbers, insurance details, and a brief description of the accident. Additionally, I took photos of the accident scene, including the damages to both vehicles and the position of the traffic signal.

    I have attached the necessary documents to this email, including the photos, a copy of the police report filed at the Evergreen Police Department, and the estimate for the repair costs from Evergreen Auto Repair, where I have taken my vehicle for assessment.

    I kindly request your prompt attention to this matter and would appreciate any guidance on the next steps in the claims process. If you require any additional information or documentation, please do not hesitate to contact me at (555) 123-4567 or sarah.turner@email.com.

    Thank you for your assistance, and I look forward to a swift resolution of this claim.

    Sincerely,

    Sarah Turner
    123 Oak Street
    Evergreen, CA 98765
    (555) 123-4567
    sarah.turner@email.com
    ',
    '
    On January 2, 2024, at around 3:30 PM, a car accident occurred at the intersection of Birch Street and Willow Avenue in Evergreen. The involved parties were Sarah Turner, driving a black Toyota Camry (DEF-456), and Daniel Reynolds in a blue Chevrolet Traverse (GHI-789).

    Sarah was heading south on Birch Street when Daniel failed to stop at the red traffic signal on Willow Avenue, causing a collision with Sarah''s vehicle. Both drivers exchanged information and took photos of the accident scene, which included damages to the front passenger side of Sarah''s Toyota Camry and the front driver''s side of Daniel''s Chevrolet Traverse. No injuries were reported.

    Sarah has attached necessary documents, such as photos, a police report, and an estimate for repair costs, to her email. She requests prompt attention to the claim and is available at (555) 123-4567 or sarah.turner@email.com for any additional information or documentation needed.
    ',
    'Intersection of Birch Street and Willow Avenue in the city of Evergreen',
    'January 2nd, 2024, at approximately 3:30 PM',
    'The sender, Sarah Turner, expresses a polite and professional tone in her email. She is respectful and detailed in her description of the car accident and the subsequent steps she took to file a claim. She requests prompt attention to the matter and provides all necessary documentation. Overall, her sentiment is one of being proactive and cooperative in the claims process.'
    );

    -- CLAIM2

    INSERT INTO claims.claims (subject, body, summary, location, time, sentiment) VALUES ('Urgent: Unacceptable Delay and Lack of Communication Regarding Claim #XYZ789', '
    Dear Prestige Insurances,

    I am writing to express my extreme dissatisfaction with the appalling service I have received concerning my recent claim, reference number #XYZ789. The lack of communication and delayed response from your company is utterly unacceptable, and I demand immediate attention to rectify this matter.

    The accident occurred on January 15, 2024, at approximately 3:45 PM, near the intersection of Maple Street and Oak Avenue in Rivertown. My vehicle, a Silver Hawk GT, was struck by another driver, identified as Samantha Reynolds, who ran a red light at the aforementioned intersection. This incident resulted in substantial damage to the front end of my car, including severe structural damage and airbag deployment.

    I reported the claim immediately after the accident, providing all necessary details, witness information, and a detailed description of the events leading up to the collision. However, the response—or lack thereof—from your company has been absolutely deplorable. I have yet to receive any updates on the status of my claim, and my attempts to contact your claims department have been met with prolonged hold times and unhelpful representatives.

    I insist on a thorough investigation into this matter and demand an explanation for the unreasonable delay. It is my right as a policyholder to receive timely updates on the progress of my claim and to be treated with the respect and urgency that this situation demands.

    Furthermore, the lack of transparency and communication from your company is not only unprofessional but also exacerbates the stress and inconvenience caused by the accident itself. I expect immediate action to be taken to expedite the processing of my claim and provide me with the information I am entitled to as a paying customer.

    I am appalled at the disregard for customer satisfaction and the apparent negligence displayed by your company in handling my claim. If my concerns are not addressed promptly and to my satisfaction, I will have no choice but to escalate this matter to the appropriate regulatory authorities and consider legal action.

    I demand a comprehensive update on the status of my claim within the next 48 hours. Failing to meet this deadline will only reinforce my belief that your company values its bottom line over the well-being of its customers.

    I trust that you will treat this matter with the urgency and seriousness it deserves.

    Sincerely,
    John T. Anderson
    Policy Number: PT567890
    ',
    '
    The text is a letter of complaint from John T. Anderson to Prestige Insurances regarding an unresolved car insurance claim, #XYZ789. The incident occurred on January 15, 2024, when Anderson''s vehicle was hit by another driver, Samantha Reynolds, who ran a red light. The accident caused significant damage to Anderson''s car, and he reported the claim immediately, providing all necessary details. However, he has experienced poor communication and a delayed response from Prestige Insurances. Anderson demands an explanation for the delay, transparency, and urgency in handling his claim. He threatens to escalate the matter to regulatory authorities and consider legal action if his concerns are not addressed promptly. Anderson requests a comprehensive update on the status of his claim within the next 48 hours.
    ',
    'Near the intersection of Maple Street and Oak Avenue in Rivertown',
    'January 15, 2024, at approximately 3:45 PM',
    'The sender of this claim is expressing extreme dissatisfaction with the handling of their insurance claim by Prestige Insurances. They are frustrated with the lack of communication and the significant delay in processing their claim. The tone of the message is demanding and assertive, with the sender threatening to escalate the matter if their concerns are not addressed promptly.'
    );

    -- CLAIM3

    INSERT INTO claims.claims (subject, body) VALUES ('Urgent: Car Accident Claim Assistance Needed', '
    Dear AssuranceCare Inc.,

    I hope this email finds you well. I''m writing to, uh, inform you about, well, something that happened recently. It''s, um, about a car accident, and I''m not really sure how to, you know, go about all this. I''m kinda anxious and confused, to be honest.

    So, the accident, uh, occurred on January 15, 2024, at around 3:30 PM. I was driving, or, um, attempting to drive, my car at the intersection of Maple Street and Elm Avenue. It''s kinda close to, um, a gas station and a, uh, coffee shop called Brew Haven? I''m not sure if that matters, but, yeah.

    So, I was just, you know, driving along, and suddenly, out of nowhere, another car, a Blue Crest Sedan, crashed into the, uh, driver''s side of my car. It was like, whoa, what just happened, you know? There was this screeching noise and, uh, some honking from other cars, and I just felt really, uh, overwhelmed.

    The weather was, um, kinda cloudy that day, but I don''t think it was raining. I mean, I can''t really remember. Sorry if that''s important. Anyway, the road, or, well, maybe the intersection, was kinda busy, with cars going in different directions. I guess that''s, you know, a detail you might need?

    As for damages, my car has, uh, significant damage on the driver''s side. The front door is all dented, and the side mirror is, like, hanging by a thread. It''s not really drivable in its current, uh, state. The Blue Crest Sedan also had some damage, but I''m not exactly sure what because, you know, everything happened so fast.

    I did manage to exchange information with the other driver. Their name is Sarah Johnson, and I got their phone number (555-1234), license plate number (ABC123), and insurance information. So, yeah, I hope that''s helpful.

    I''m not sure what, um, steps I should take now. Do I need to go to a specific, uh, repair shop? Should I get a quote for the repairs? And, uh, how do I, you know, proceed with the insurance claim? I''m kinda lost here, and any guidance or assistance you can provide would be really, um, appreciated.

    Sorry if this email is a bit all over the place. I''m just really, uh, anxious about the whole situation. Thank you for your understanding.

    Sincerely,

    Jane Doe
    Policy Number: AC987654
    ');

    -- IMAGES

    INSERT INTO claims.original_images (image_name, image_key, claim_id) VALUES ('car0.jpg', 'original_images/car0.jpg', 1);
    INSERT INTO claims.original_images (image_name, image_key, claim_id) VALUES ('car1.jpg', 'original_images/car1.jpg', 1);
    INSERT INTO claims.original_images (image_name, image_key, claim_id) VALUES ('car2.jpg', 'original_images/car2.jpg', 2);
    INSERT INTO claims.original_images (image_name, image_key, claim_id) VALUES ('car3.jpg', 'original_images/car3.jpg', 3);
    INSERT INTO claims.original_images (image_name, image_key, claim_id) VALUES ('car5.jpg', 'original_images/car5.jpg', 3);
    INSERT INTO claims.original_images (image_name, image_key, claim_id) VALUES ('car6.jpg', 'original_images/car6.jpg', 3);
    INSERT INTO claims.processed_images (image_name, image_key, claim_id) VALUES ('car0-processed.jpg', 'processed_images/car0-processed.jpg', 1);
    INSERT INTO claims.processed_images (image_name, image_key, claim_id) VALUES ('car1-processed.jpg', 'processed_images/car1-processed.jpg', 1);
    INSERT INTO claims.processed_images (image_name, image_key, claim_id) VALUES ('car2-processed.jpg', 'processed_images/car2-processed.jpg', 2);
    -- INSERT INTO claims.processed_images (image_name, image_key, claim_id) VALUES ('car3-processed.jpg', 'processed_images/car3-processed.jpg', 3);
    -- INSERT INTO claims.processed_images (image_name, image_key, claim_id) VALUES ('car5-processed.jpg', 'processed_images/car5-processed.jpg', 3);
    -- INSERT INTO claims.processed_images (image_name, image_key, claim_id) VALUES ('car6-processed.jpg', 'processed_images/car6-processed.jpg', 3);
{{- end }}